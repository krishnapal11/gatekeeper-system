{{- /* Name of the ConstraintTemplate this Constraint is based on */}}
{{- $templateName := "k8sblocknodeport" }}
{{- /* Get the configuration for this specific template from .Values */}}
{{- $templateConfig := index .Values.constraintTemplates $templateName }}

{{- /* Only render if enabled in .Values. */}}
{{- if $templateConfig.enabled }}
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sBlockNodePort {{/* Must match spec.crd.spec.names.kind from the ConstraintTemplate */}}
metadata:
  name: {{ $templateName }}-enforce {{/* Name of this specific constraint instance */}}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  enforcementAction: {{ $templateConfig.enforcementAction | default "dryrun" }} # Default to dryrun
  match:
    {{- /* Default match targets all Services. User can override via values.yaml $templateConfig.match */}}
    {{- $defaultMatch := dict "kinds" (list (dict "apiGroups" (list "") "kinds" (list "Service"))) }}
    {{- toYaml ($templateConfig.match | default $defaultMatch) | nindent 4 }}
  parameters:
    {{- /* Pass params if they exist in values.yaml ($templateConfig.params).
         If $templateConfig.params is nil or empty, pass an empty YAML map '{}'.
         The Rego in the ConstraintTemplate handles the case where 'message' is not provided. */}}
    {{- if $templateConfig.params }}
    {{- toYaml $templateConfig.params | nindent 4 }}
    {{- else }}
    {}
    {{- end }}
{{- end }}
